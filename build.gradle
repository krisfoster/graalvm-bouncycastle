import org.apache.tools.ant.taskdefs.condition.Os

// ========== 1. Build script

buildscript {
	apply from: "https://artifactory.pearsonvue.com/pearsonvue-configs/artifactory-repositories.gradle"
	apply from: "versions.gradle"
	dependencies {
		classpath "no.nils:wsdl2java:$versions.wsdl2java"
		classpath "com.github.ben-manes:gradle-versions-plugin:$versions.gradle_versions_plugin"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$versions.spring_boot"
	}
}

// ========== 2. Apply plugins

apply plugin: "idea"
apply plugin: "jacoco"
apply plugin: "java"
apply plugin: "pmd"
apply plugin: "org.springframework.boot"
apply plugin: "war"
apply plugin: "no.nils.wsdl2java"

//Adds 'dependencyUpdates' task, which checks if dependencies match the latest entities version
apply plugin: "com.github.ben-manes.versions"
apply from: "https://artifactory.pearsonvue.com/pearsonvue-configs/jacoco-extension.gradle"
apply plugin: "io.spring.dependency-management"

// ========== 3. Project variables

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// copy BUILD_NUMBER environment variable from TeamCity.
//version = System.getenv("BUILD_NUMBER") ?: "dev"
version "1.2009.1-SNAPSHOT"

// ========== 4. Dependencies

configurations.all {
	all*.exclude group: "org.opensaml"
	all*.exclude group: "org.glassfish.external"
	all*.exclude group: "org.glassfish.gmbal"
	all*.exclude group: "org.apache.xmlgraphics"
	all*.exclude group: "net.java.dev.javacc"
	all*.exclude group: "org.apache.ant"
	all*.exclude group: "javax.servlet", module: "servlet-implementation"
	all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
	all*.exclude group: "log4j"
	all*.exclude group: 'org.codehaus.groovy', module: 'groovy-all'
	all*.exclude group: "javax.xml.bind",module: "jaxb-implementation"
	all*.exclude group: "com.sun.xml.bind",module: "jaxb-impl"
	all*.exclude group: "com.sun.xml.bind",module: "jaxb-core"
	all*.exclude group: "com.sun.xml.bind",module: "jaxb-xjc"
	all*.exclude group: "com.vue.exam",module: "AthenaBrowserDependencies"
}

dependencies {
	constraints {
		implementation ("org.springframework.boot:spring-boot") {
			version {
				strictly "[2.0, 3.0["
				because "This project requires Spring Boot 2.x, so reject 3.x"
			}
		}
	}
	constraints {
		implementation ("org.apache.tomcat.embed:tomcat-embed-core") {
			version {
				strictly "9.0.30"
				because "There's a bug in 9.0.31 that affects upload over 10MB"
			}
		}
	}
	constraints {
		implementation ("org.apache.tomcat.embed:tomcat-embed-websocket") {
			version {
				strictly "9.0.30"
				because "There's a bug in 9.0.31 that affects upload over 10MB"
			}
		}
	}
	constraints {
		implementation("org.apache.tomcat.embed:tomcat-embed-el") {
			version {
				strictly "9.0.30"
				because "There's a bug in 9.0.31 that affects upload over 10MB"
			}
		}
	}
	//implementation "com.vue.exam:AthenaBrowserDependencies:$versions.AthenaBrowserDependencies"
	// Versions determined by AthenaBrowserDependencies
	/*implementation "com.vue.exam:Exam-Schemas"
    implementation "com.vue.exam:AthenaBrowserCommons"
	implementation "com.vue.exam:AthenaBrowserSchemas"
	implementation "com.vue.exam:IBTHub-Schemas"
	implementation "com.vue.exam.xfile:Exam-XFiles"
	implementation "com.vue.exam.driver:TestDriverCommons"
	implementation "com.vue.exam:ScoreReportGenerator"*/

	// Athena Browser dependencies
	implementation "com.vue.exam:Exam-Schemas:$versions.Exam_Schemas"
	implementation "com.vue.exam:AthenaBrowserCommons:$version"
	implementation "com.vue.exam:AthenaBrowserSchemas:$version"
	implementation "com.vue.exam:IBTHub-Schemas:$version"
	implementation "com.vue.exam.xfile:Exam-XFiles:$versions.Exam_XFiles"
	implementation "com.vue.exam.driver:TestDriverCommons:$versions.TestDriverCommons"
	implementation "com.vue.exam:ScoreReportGenerator:$versions.ScoreReportGenerator"
	implementation "com.vue:VUECommons:$versions.VUECommons"
	implementation "com.vue.common:messaging-commons:$versions.messaging_commons"
	implementation "com.vue.exam:ResourceContainer:$versions.ResourceContainer"
	implementation "com.vue:VUEProvider:$versions.VUEProvider"

	//implementation "javax.validation:validation-api:$versions.javax_validation"
	implementation "org.apache.cxf:cxf-core:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-rs-client:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-frontend-jaxrs:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-features-clustering:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-frontend-jaxws:$versions.cxf"
	implementation "com.sun.xml.messaging.saaj:saaj-impl:$versions.saaj_impl"
	implementation "org.apache.cxf:cxf-rt-frontend-simple:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-management:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-transports-http:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-ws-addr:$versions.cxf"
	implementation "org.apache.cxf:cxf-rt-ws-security:$versions.cxf"

	implementation "org.jetbrains:annotations:$versions.jet_brains_annotation"
	implementation "org.bouncycastle:bcprov-jdk15on:$versions.bouncy_castle"
	implementation "io.springfox:springfox-swagger2:$versions.swagger2"
	implementation "io.springfox:springfox-swagger-ui:$versions.swagger2"

	implementation "org.springframework.boot:spring-boot:$versions.spring_boot"
	implementation "org.springframework.boot:spring-boot-starter-web:$versions.spring_boot"
	implementation "org.springframework.experimental:spring-graalvm-native:$versions.spring_graal_vm_native"
	implementation "org.springframework:spring-context-indexer"

	implementation "net.sf.ehcache:ehcache:$versions.net_sf_ehcache"

	testImplementation "org.springframework.boot:spring-boot-starter-test:$versions.spring_boot"
	testImplementation "junit:junit:$versions.junit"
	testImplementation ("org.mockito:mockito-core:$versions.mockito"){
		force = true
	}
	testImplementation "org.powermock:powermock-api-mockito2:$versions.powermock"
	testImplementation"org.powermock:powermock-module-junit4:$versions.powermock"

	providedRuntime "org.springframework.boot:spring-boot-loader:$versions.spring_boot"
	providedRuntime ("org.springframework.boot:spring-boot-starter-tomcat:$versions.spring_boot"){
		exclude module: "tomcat-embed-jasper"
		exclude module: "tomcat-embed-core"
		exclude module: "tomcat-embed-el"
		exclude module: "tomcat-embed-websocket"
	}
	providedRuntime ("org.apache.tomcat.embed:tomcat-embed-jasper:$versions.tomcat_embed"){
		exclude module: "tomcat-embed-core"
		exclude module: "tomcat-embed-el"
	}
	providedRuntime "org.apache.tomcat.embed:tomcat-embed-core:$versions.tomcat_embed"
	providedRuntime "org.apache.tomcat.embed:tomcat-embed-el:$versions.tomcat_embed"
	providedRuntime "org.apache.tomcat.embed:tomcat-embed-websocket:$versions.tomcat_embed"


}

// ========== 5. Configuration

idea {
	project {
		jdkName = project.sourceCompatibility.toString()
		languageLevel = project.sourceCompatibility
	}
}

jacoco {
	toolVersion = versions.jacoco
}

// The excludes are for class files. Need to have / for folders and either wildcard or .class suffix
jacocoVueExtension.excludeFromTotal = ["**/*Config*", "**/*Application.class"]

jacocoTestCoverageVerification {
	violationRules {
		// See http://www.eclemma.org/jacoco/trunk/doc/counters.html for a description of the counters
		rule {
			limit {
				counter = 'BRANCH'
				minimum = 0.3
			}
		}
		rule {
			limit {
				counter = 'LINE'
				minimum = 0.5
			}
		}
		rule {
			limit {
				counter = 'METHOD'
				minimum = 0.6
			}
		}
		rule {
			limit {
				counter = 'CLASS'
				minimum = 0.8
			}
		}
	}
}

pmd {
	toolVersion = "$versions.pmd"
	// Level 3: Change recommended. Behavior is confusing, perhaps buggy,
	// and/or against standards/best practices.
	rulePriority = 3
}

bootWar {
	archiveFileName = "localabeservice.war"

	manifest {
		attributes(
				"Implementation-Title": project.name,
				"Implementation-Vendor": "Pearson VUE",
				"Implementation-Vendor-Id": "com.pearson",
				"Implementation-Version": project.version,
				"Specification-Title": project.name,
				"Specification-Vendor": "Pearson VUE",
				"Specification-Version": project.version
		)
	}

	entryCompression ZipEntryCompression.STORED
	rootSpec.exclude "**/*.dll"
	rootSpec.exclude "**/*.swc"
}

// ========== 6. Other Tasks

// Determine if we need to run python or python3 executable
static def getPythonExec() {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		// "python" or "py" is the expected command for Windows
		// See https://docs.python.org/3/using/windows.html#from-the-command-line
		return "python"
	} else if (Os.isFamily(Os.FAMILY_UNIX)) {
		// Unix-like (including macOS) distributions are expected to install the "python3" command, and can do whatever
		// they want for the "python" command. See https://www.python.org/dev/peps/pep-0394/
		return "python3"
	}
}

/**
 * Set up the local properties for configurable servers, such as Rabbit and Mongo
 * Uses a python script to write a properties file into MINERVA_HOME/conf containing
 * the necessary values. This task should only be run locally
 */
task setupLocalProperties {
	doLast {
		exec {
			def minerva_home = System.getenv("MINERVA_HOME")
			if (minerva_home == null) {
				throw new IllegalStateException("MINERVA_HOME system environment variable is undefined; please set it to a directory of your choosing")
			}
			// the output file must be different from the template file
			def conf_dir = [minerva_home, 'conf'].join(File.separator)
			mkdir(conf_dir)
			def python_exec = getPythonExec()

			commandLine python_exec,
					'cfg/configs.py',
					// REPLACE-TEMPLATE
					projectDir.path + '/cfg/localabeservice-local.ini',
					'DISCONNECTED-LOCAL',
					'-out-dir', conf_dir
		}
	}
}

task generateAppVersion() {
	def versionProperties = file("$webAppDir/WEB-INF/classes/version.properties")

	inputs.property("version", project.version.toString())
	outputs.file(versionProperties).withPropertyName("VersionProperties")
	outputs.cacheIf { true }

	doLast {
		versionProperties.parentFile.mkdirs()
		versionProperties.text = "app.version=" + project.version
	}
}

bootWar.dependsOn generateAppVersion

task explodeWar(type: Sync) {
	description "Explodes the war file so that it can be run as a Tomcat project in Intellij IDEA."
	group "Build"
	into "${war.destinationDirectory.get()}/exploded/${war.archiveFileName.get()}"
	with war
}

/*wsdl2java {
	// Note that java classes will be generated under build/generatedsources
	wsdlsToGenerate = [
			[file("src/main/java/com/vue/labs/tds/ws/TestDeliveryService.wsdl")]
	]
	wsdlDir = file("src/main/java/com/demo/ws")
	ext.cxfVersion = versions.cxf
}*/
